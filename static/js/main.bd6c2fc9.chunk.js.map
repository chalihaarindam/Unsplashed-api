{"version":3,"sources":["photoSlice.js","resultSlice.js","headSlice.js","features/counter/counterSlice.js","Gallery.js","Login.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["photoSlice","createSlice","name","initialState","photo","reducers","setPhoto","state","action","payload","actions","selectPhoto","resultSlice","result","setResult","selectResult","headSlice","value","title","setHead","val","setTitle","temp","emptyHead","selectHead","head","counterSlice","status","increment","reset","selectCount","counter","Gallery","image","className","src","alt","Login","dispatch","useDispatch","useSelector","count","onChange","e","target","type","placeholder","onClick","console","log","url","axios","get","then","response","res","data","results","total","align","slice","map","urls","small","App","store","configureStore","reducer","counterReducer","photoReducer","resultReducer","headReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bd6c2fc9.chunk.js","sourcesContent":["import {  createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const photoSlice = createSlice({\r\n  name: 'photo',\r\n  initialState: {\r\n      photo: \"\"\r\n  },\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    setPhoto: (state,action) => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.photo = action.payload.photo;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setPhoto } = photoSlice.actions;\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectPhoto = (state) => state.photo;\r\n\r\n\r\nexport default photoSlice.reducer;\r\n","import {  createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const resultSlice = createSlice({\r\n  name: 'result',\r\n  initialState: {\r\n      result: []\r\n  },\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    setResult: (state,action) => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.result = action.payload.result;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setResult } = resultSlice.actions;\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectResult = (state) => state.result;\r\n\r\n\r\nexport default resultSlice.reducer;","import {  createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const headSlice = createSlice({\r\n  name: 'head',\r\n  initialState: {\r\n      value: null,\r\n      title: \"\",\r\n  },\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    setHead: (state,action) => {\r\n    \r\n      state.value = action.payload.val;\r\n    },\r\n    setTitle: (state,action) => {\r\n            state.title = action.payload.temp;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setHead , emptyHead, setTitle} = headSlice.actions;\r\n\r\n\r\nexport const selectHead = (state) => state.head;\r\n\r\n\r\nexport default headSlice.reducer;","import {  createSlice } from '@reduxjs/toolkit';\n\n\nconst initialState = {\n  value: 10,\n  status: 'idle',\n};\n\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n  \n      state.value += 5;\n    },\n    reset: (state) => {\n      state.value = 10;\n    }\n  },\n \n});\n\nexport const {increment,reset} = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\n\n\nexport default counterSlice.reducer;\n","import React from 'react';\r\nimport './Gallery.css';\r\n\r\nfunction Gallery({image}) {\r\n    return (\r\n        <div className=\"gallery\">\r\n            <img src={image} alt=\"not available\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Gallery;\r\n","import React from 'react';\r\nimport { useDispatch , useSelector} from 'react-redux';\r\nimport { setPhoto, selectPhoto } from './photoSlice';\r\nimport { setResult, selectResult } from './resultSlice';\r\nimport{ setHead , emptyHead, selectHead, setTitle} from './headSlice';\r\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\r\nimport { increment ,selectCount,reset} from './features/counter/counterSlice';\r\nimport axios from 'axios';\r\nimport './Login.css';\r\nimport Gallery from './Gallery.js';\r\n\r\n\r\nfunction Login() {\r\n    const dispatch = useDispatch();\r\n   \r\n    const photo = useSelector(selectPhoto);\r\n    const result = useSelector(selectResult);\r\n    const count = useSelector(selectCount);\r\n    const head = useSelector(selectHead);\r\n\r\n\r\n    const handleChange = e => {\r\n        dispatch(setPhoto({...photo,[e.target.name]: e.target.value}));\r\n    }\r\n\r\n    const handleSubmit = e => {\r\n        \r\n        console.log(photo.photo);\r\n        const url = \"https://api.unsplash.com/search/photos/?page=1&per_page=30&client_id=riHZvs9f4XeSAJHCo_8HCWl19eZb0PY81ixEbRWLULY&query=\"+photo.photo;\r\n        axios.get(url)\r\n            .then((response) =>{\r\n                console.log(response);\r\n                const res = response.data.results;\r\n                const val = response.data.total;\r\n                const temp = photo.photo;\r\n                dispatch(setResult({...result,result: res}));\r\n                dispatch(setHead({...head,val}));  \r\n                dispatch(setTitle({...head,temp}));\r\n                dispatch(reset());\r\n            });  \r\n      }\r\n\r\n    const handleMore = () => {\r\n        dispatch(increment());\r\n      }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"login\">\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                     <div className=\"col-10 \">\r\n                        <input className=\"search_bar\" onChange={handleChange} type=\"text\" name=\"photo\" placeholder=\"Search for photos\"/>\r\n                     </div>\r\n                    <div className=\"col-2\">\r\n                        <button className=\"btn btn-dark search\" onClick={handleSubmit}  type=\"submit\">\r\n                        <i className=\"fa fa-search icon fa-2x\" aria-hidden=\"true\"></i>\r\n                        </button>\r\n                  </div>\r\n                </div>\r\n            </div> \r\n            <br></br>\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                <div className=\"col-7  lo\" align=\"left\">\r\n                         <p className=\"line_one\">{head.title}</p>\r\n                         {head.value ? <p className=\"line_two\">{head.value} Images have been found.</p> : <p></p>}\r\n                     </div>\r\n                </div>\r\n            </div> \r\n            \r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                     <div className=\"home_row\" align=\"center\">\r\n                            {result.result.slice(0, count).map((photo)=>{\r\n                                 return <Gallery image={photo.urls.small} />\r\n                             })}\r\n                     </div>\r\n                </div>\r\n            </div> \r\n             \r\n           \r\n\r\n           {head.value ? <button onClick={handleMore}  type=\"submit\" className=\"btn btn-dark load\">Load More</button> : <h1></h1>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Login;\r\n","import React from 'react';\nimport './App.css';\nimport  Login  from './Login';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n      <Login/>\n\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\nimport photoReducer from '../photoSlice';\nimport resultReducer from '../resultSlice';\nimport headReducer from '../headSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    photo: photoReducer,\n    result: resultReducer,\n    head: headReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}